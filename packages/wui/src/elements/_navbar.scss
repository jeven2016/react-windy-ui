//todo: navar 不能设置height,会导致flex-direction：column时无法撑开高度

.navbar {
  @include make-navbar;
  flex-wrap: wrap;
  line-height: $navbar-item-height;
  color: $navbar-title-color;
  padding: 0 1rem;

  &.auto-hide {
    &.small-window {
      .navbar-switch {
        display: inline-flex;
      }

      &.expand {
        flex-direction: column;
        padding-bottom: 1rem;
      }

      > .left-bar {
        flex: 1 1 100%;

        > .title {
          flex: 1 1 100%;

          > .title-info {
            flex: 1 1 100%;
          }
        }
      }
    }
  }

  &.with-border {
    border: $default-border;
  }

  > .left-bar {
    display: flex;

    > .title {
      @include make-flex {
        align-items: center;
        color: inherit;
        padding: $navbar-title-padding;
        font-weight: map_get($font-weight, 'bold');
        font-size: 1.25rem;
      }

      > .navbar-switch:first-child {
        margin: 0 .5rem 0 -0.5rem;
      }

      > .navbar-switch:last-child {
        margin: 0 -0.5rem 0 .5rem;
      }

      > .title-info {
        padding: 0 0.25rem
      }
    }
  }

  .navbar-switch {
    display: none;
  }

  > .list {
    align-items: center;
    flex: 1 1 auto;
    display: none; //by default, the list is hidden. Because we want to firstly check the size of current window and then decide whether to show the list

    &.align-right {
      justify-content: flex-end;
    }

    &.align-left {
      justify-content: flex-start;
    }

    &.align-center {
      justify-content: center;
    }

    &.small-window {
      flex-direction: column;

      .navbar-item {
        justify-content: flex-start;
        align-items: center;
        width: 100%;
        line-height: $navbar-item-height - 1rem;
      }
    }
  }

  .navbar-item {
    @include make-flex {
      @include make-flex-center;
      position: $navbar-item-position;
      @include make-navbar-item($navbar-inactive-text-color);
      transition: all 0.2s;
      height: 100%;
    }

    &.compact {
      padding: 0;
      min-width: unset;
    }

    &.with-bar {
      &.active, &:focus, &:hover {
        //create the bottom border
        &:after {
          @include make-block(absolute) {
            left: 0;
            bottom: 0;
            content: '';
            border-radius: .2rem;
            height: $navbar-simple-item-link-border-height;
            width: $navbar-simple-item-link-border-width;
            background-color: $navbar-simple-item-link-background-colorh;
            transition: all 0.5s;
            animation: change-width-smoothly 0.3s;
          }
        }
      }
    }

    &.with-bg {
      &.active {
        background: rgba(0, 0, 0, .13);
      }

      &:focus, &:hover {
        background: rgba(0, 0, 0, .1);
      }
    }

    &.active, &:focus, &:hover {
      color: $navbar-item-active-color;
    }

  }

  &.fixed {
    @include fixed(map_get($z-index, 'mask'), false, null);
    border-radius: 0;
    width: 100%;

    &.top {
      top: 0;

      > .list {
        //padding-bottom: 1rem;
      }
    }

    &.bottom {
      bottom: 0;

      &.small-window {
        &.expand {
          padding-top: 1rem;
          padding-bottom: 0;
        }

        > .left-bar {
          order: 2;
        }

        > .list {
          order: 1;
        }
      }

    }
  }

  &.primary {
    background-color: $navbar-background-color-primary;
    color: $navbar-primary-active-color;

    .button {
      &.default:not(.navbar-switch) {
        border: none !important;
        box-shadow: none !important;
      }

      &.default {
        @include focus-active2 {
          background: rgba(0, 0, 0, .1);
          color: $white;
        }
      }
    }

    .navbar-item {
      color: $navbar-primary-item-color;

      &.active, &:hover {
        color: $navbar-primary-active-color;
      }

      &.with-bg {
        &.active {
          background-color: rgba(255, 255, 255, .2);
        }

        &:focus, &:hover {
          background-color: rgba(255, 255, 255, .3);;
        }
      }

      .input {
        background: rgba(255, 255, 255, 0.13);
        color: $white;
        border: none;

        @include make-placeholder {
          color: rgba(255, 255, 255, .4);
        }

        @include focus-active2 {
          background: rgba(255, 255, 255, 0.30);
        }
      }

      .icon-input {
        @extend .input;

        > .input {
          background: transparent;
        }

        .icon-column {
          color: rgba(255, 255, 255, .7);
        }

        @include focus-active2 {
          > .input {
            background: transparent;
          }
        }
      }
    }
  }

}

//@include media-query((key:'min-width', value: map-get($bs-layout, 'md'))) {
//  .navbar.auto-hide {
//    .navbar-switch {
//      display: none;
//    }
//
//    flex-direction: row;
//
//    > .list {
//      display: flex;
//      flex-direction: row;
//    }
//  }
//}

//change the list in column style
/*
@include media-query((key:'max-width', value: map-get($bs-layout, 'md'))) {
  &.navbar.auto-hide {
    flex-direction: column;

    .navbar-switch {
      display: inline-flex;
    }

    > .list {
      display: none;
      flex-direction: column;
      align-items: flex-start;
    }

    .navbar-item {
      justify-content: flex-start;
      align-items: center;
      width: 100%;
      padding-left: 1.5rem;
      line-height: $navbar-item-height - 1rem;
    }
  }
}*/
